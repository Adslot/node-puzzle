// Generated by CoffeeScript 1.9.1
(function(data) {
    var GEO_FIELD_COUNTRY, GEO_FIELD_MAX, GEO_FIELD_MIN, ds, fs, gindex, normalize;

    fs = require('fs');

    GEO_FIELD_MIN = 0;

    GEO_FIELD_MAX = 1;

    GEO_FIELD_COUNTRY = 2;

    data.ip2long = function(ip) {
        ip = ip.split('.', 4);
        return +ip[0] * 16777216 + +ip[1] * 65536 + +ip[2] * 256 + +ip[3];
    };

    gindex = [];

    data.load = function() {
        var data, j, len, line, results;
        data = fs.readFileSync(__dirname + "/../data/geo.txt", 'utf8');
        data = data.toString().split('\n');
        results = [];
        for (j = 0, len = data.length; j < len; j++) {
            line = data[j];
            if (!(line)) {
                continue;
            }
            line = line.split('\t');
            results.push(gindex.push([+line[0], +line[1], line[3]]));
        }
        return results;
    };

    normalize = function(row) {
        return {
            country: row[GEO_FIELD_COUNTRY]
        };
    };

    data.lookup = function(ip) {
        var find, line;
        if (!ip) {
            return -1;
        }
        find = this.ip2long(ip);
        line = binaryIndexOf(find);
        if (line != -1) {
            return normalize(gindex[line]);
        }
        return null;
    };

    /*
     Performs a binary search on the data file
     @param {*} searchedIp The ip to search for within the data.
     @return {Number} The line index of the searched ip inside the data file which defaults to -1 when not found.
     */
      function binaryIndexOf(searchedIp) {
            var currentIndex, currentLine, currentLineMin, currentLinedMax, maxIndex, minIndex;
            minIndex = 0;
            maxIndex = gindex.length - 1;
            currentIndex =  0;

            while (minIndex <= maxIndex) {
                currentIndex = (minIndex + maxIndex) / 2 | 0;
                currentLine = gindex[currentIndex];
                currentLineMin = currentLine[GEO_FIELD_MIN];
                currentLinedMax = currentLine[GEO_FIELD_MAX];
                if (searchedIp >= currentLineMin && searchedIp <= currentLinedMax) {
                    return currentIndex;
                }
                if (searchedIp > currentLineMin) {
                    minIndex = currentIndex + 1;
                }
                else if (searchedIp < currentLinedMax) {
                    maxIndex = currentIndex - 1;
                }
            }
            return -1;
        };

})(module.exports);
